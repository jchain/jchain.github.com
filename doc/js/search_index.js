var search_data = {"index":{"searchIndex":["backtickcodeblock","highlightcode","jekyll","blockquote","categoryfeed","categoryindex","categorylist","codeblock","contentfilters","convertible","filters","generatecategories","gisttag","gisttagnocache","hamlconverter","imagetag","includearraytag","includecodetag","jsfiddle","layout","markdownconverter","page","pager","pagination","post","postfilter","pullquotetag","rawtag","renderpartialtag","site","sitemapfile","sitemapgenerator","tagcloud","videotag","object","octopress","date","octopressfilters","octopressliquidfilters","rubypants","string","templatewrapper","cache()","calculate_pages()","category_links()","cdata_escape()","condense_spaces()","convert()","convert()","date_to_html_string()","datetime()","do_layout()","educate_backticks()","educate_dashes()","educate_dashes_inverted()","educate_dashes_oldschool()","educate_ellipses()","educate_quotes()","educate_single_backticks()","excerpt()","excluded?()","expand_urls()","fill_last_modified()","fill_location()","fill_pages()","fill_posts()","fill_url()","find_latest_date()","format_date()","full_path_to_source()","full_path_to_source()","full_path_to_source()","full_url()","generate()","generate()","generate()","get_cache_file_for()","get_cached_gist()","get_gist_from_web()","get_gist_url_for()","greater_date()","has_excerpt()","highlight()","html_output_for()","is_filterable?()","is_page?()","is_post?()","load_post_filters()","location_on_server()","location_on_server()","matches()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","old_do_layout()","old_transform()","old_write()","old_write()","ordinal()","ordinalize()","output_ext()","paginate()","pagination_enabled?()","paragraphize()","parse()","post_filter()","post_render()","post_render()","post_render()","post_write()","post_write()","posts_included?()","pre_filter()","pre_render()","pre_render()","pre_render()","process_escapes()","pygments()","raw_content()","read_posts()","render()","render()","render()","render()","render()","render()","render()","render()","render()","render()","render()","render()","render_code_block()","safe_wrap()","script_url_for()","shorthand_url()","smart_capitalize()","smart_capitalize!()","strip_slash()","stupefy_entities()","summary()","tableize_code()","titlecase()","titlecase()","titlecase!()","to_html()","to_liquid()","to_liquid()","tokenize()","transform()","truncate()","truncatewords()","unwrap()","valid_change_frequency?()","valid_priority?()","write()","write()","write()","write_category_index()","write_category_indexes()","gemfile","rakefile"],"longSearchIndex":["backtickcodeblock","highlightcode","jekyll","jekyll::blockquote","jekyll::categoryfeed","jekyll::categoryindex","jekyll::categorylist","jekyll::codeblock","jekyll::contentfilters","jekyll::convertible","jekyll::filters","jekyll::generatecategories","jekyll::gisttag","jekyll::gisttagnocache","jekyll::hamlconverter","jekyll::imagetag","jekyll::includearraytag","jekyll::includecodetag","jekyll::jsfiddle","jekyll::layout","jekyll::markdownconverter","jekyll::page","jekyll::pager","jekyll::pagination","jekyll::post","jekyll::postfilter","jekyll::pullquotetag","jekyll::rawtag","jekyll::renderpartialtag","jekyll::site","jekyll::sitemapfile","jekyll::sitemapgenerator","jekyll::tagcloud","jekyll::videotag","object","octopress","octopress::date","octopressfilters","octopressliquidfilters","rubypants","string","templatewrapper","jekyll::gisttag#cache()","jekyll::pager::calculate_pages()","jekyll::filters#category_links()","octopressliquidfilters#cdata_escape()","octopressliquidfilters#condense_spaces()","jekyll::hamlconverter#convert()","jekyll::markdownconverter#convert()","jekyll::filters#date_to_html_string()","octopress::date#datetime()","jekyll::convertible#do_layout()","rubypants#educate_backticks()","rubypants#educate_dashes()","rubypants#educate_dashes_inverted()","rubypants#educate_dashes_oldschool()","rubypants#educate_ellipses()","rubypants#educate_quotes()","rubypants#educate_single_backticks()","octopressliquidfilters#excerpt()","jekyll::sitemapgenerator#excluded?()","octopressliquidfilters#expand_urls()","jekyll::sitemapgenerator#fill_last_modified()","jekyll::sitemapgenerator#fill_location()","jekyll::sitemapgenerator#fill_pages()","jekyll::sitemapgenerator#fill_posts()","jekyll::sitemapgenerator#fill_url()","jekyll::sitemapgenerator#find_latest_date()","octopress::date#format_date()","jekyll::layout#full_path_to_source()","jekyll::page#full_path_to_source()","jekyll::post#full_path_to_source()","jekyll::convertible#full_url()","jekyll::generatecategories#generate()","jekyll::pagination#generate()","jekyll::sitemapgenerator#generate()","jekyll::gisttag#get_cache_file_for()","jekyll::gisttag#get_cached_gist()","jekyll::gisttag#get_gist_from_web()","jekyll::gisttag#get_gist_url_for()","jekyll::sitemapgenerator#greater_date()","octopressliquidfilters#has_excerpt()","highlightcode#highlight()","jekyll::gisttag#html_output_for()","jekyll::convertible#is_filterable?()","jekyll::convertible#is_page?()","jekyll::convertible#is_post?()","jekyll::site#load_post_filters()","jekyll::page#location_on_server()","jekyll::post#location_on_server()","jekyll::hamlconverter#matches()","jekyll::blockquote::new()","jekyll::categoryfeed::new()","jekyll::categoryindex::new()","jekyll::categorylist::new()","jekyll::codeblock::new()","jekyll::gisttag::new()","jekyll::gisttagnocache::new()","jekyll::imagetag::new()","jekyll::includearraytag::new()","jekyll::includecodetag::new()","jekyll::jsfiddle::new()","jekyll::page::new()","jekyll::pager::new()","jekyll::pullquotetag::new()","jekyll::renderpartialtag::new()","jekyll::tagcloud::new()","jekyll::videotag::new()","rubypants::new()","jekyll::convertible#old_do_layout()","jekyll::convertible#old_transform()","jekyll::page#old_write()","jekyll::post#old_write()","octopress::date#ordinal()","octopress::date#ordinalize()","jekyll::hamlconverter#output_ext()","jekyll::pagination#paginate()","jekyll::pager::pagination_enabled?()","jekyll::blockquote#paragraphize()","jekyll::rawtag#parse()","octopressfilters#post_filter()","jekyll::contentfilters#post_render()","jekyll::convertible#post_render()","jekyll::postfilter#post_render()","jekyll::convertible#post_write()","jekyll::postfilter#post_write()","jekyll::sitemapgenerator#posts_included?()","octopressfilters#pre_filter()","jekyll::contentfilters#pre_render()","jekyll::convertible#pre_render()","jekyll::postfilter#pre_render()","rubypants#process_escapes()","highlightcode#pygments()","octopressliquidfilters#raw_content()","jekyll::site#read_posts()","jekyll::blockquote#render()","jekyll::categorylist#render()","jekyll::codeblock#render()","jekyll::gisttag#render()","jekyll::imagetag#render()","jekyll::includearraytag#render()","jekyll::includecodetag#render()","jekyll::jsfiddle#render()","jekyll::pullquotetag#render()","jekyll::renderpartialtag#render()","jekyll::tagcloud#render()","jekyll::videotag#render()","backtickcodeblock#render_code_block()","templatewrapper#safe_wrap()","jekyll::gisttag#script_url_for()","octopressliquidfilters#shorthand_url()","string#smart_capitalize()","string#smart_capitalize!()","octopressliquidfilters#strip_slash()","rubypants#stupefy_entities()","octopressliquidfilters#summary()","highlightcode#tableize_code()","octopressliquidfilters#titlecase()","string#titlecase()","string#titlecase!()","rubypants#to_html()","jekyll::pager#to_liquid()","jekyll::post#to_liquid()","rubypants#tokenize()","jekyll::convertible#transform()","octopressliquidfilters#truncate()","octopressliquidfilters#truncatewords()","templatewrapper#unwrap()","jekyll::sitemapgenerator#valid_change_frequency?()","jekyll::sitemapgenerator#valid_priority?()","jekyll::page#write()","jekyll::post#write()","jekyll::sitemapfile#write()","jekyll::site#write_category_index()","jekyll::site#write_category_indexes()","",""],"info":[["BacktickCodeBlock","","BacktickCodeBlock.html","",""],["HighlightCode","","HighlightCode.html","",""],["Jekyll","","Jekyll.html","","<p>Author: phaer, github.com/phaer Source: gist.github.com/1020852\nDescription: Raw tag for jekyll. Keeps …\n"],["Jekyll::Blockquote","","Jekyll/Blockquote.html","",""],["Jekyll::CategoryFeed","","Jekyll/CategoryFeed.html","","<p>The CategoryFeed class creates an Atom feed for the specified category.\n"],["Jekyll::CategoryIndex","","Jekyll/CategoryIndex.html","","<p>The CategoryIndex class creates a single category page for the specified\ncategory.\n"],["Jekyll::CategoryList","","Jekyll/CategoryList.html","",""],["Jekyll::CodeBlock","","Jekyll/CodeBlock.html","",""],["Jekyll::ContentFilters","","Jekyll/ContentFilters.html","",""],["Jekyll::Convertible","","Jekyll/Convertible.html","","<p>Monkey patch for the Jekyll Convertible module. For the original class,\nsee: github.com/mojombo/jekyll/blob/master/lib/jekyll/convertible.rb …\n"],["Jekyll::Filters","","Jekyll/Filters.html","","<p>Adds some extra filters used during the category creation process.\n"],["Jekyll::GenerateCategories","","Jekyll/GenerateCategories.html","","<p>Jekyll hook - the generate method is called by jekyll, and generates all of\nthe category pages.\n"],["Jekyll::GistTag","","Jekyll/GistTag.html","",""],["Jekyll::GistTagNoCache","","Jekyll/GistTagNoCache.html","",""],["Jekyll::HamlConverter","","Jekyll/HamlConverter.html","",""],["Jekyll::ImageTag","","Jekyll/ImageTag.html","",""],["Jekyll::IncludeArrayTag","","Jekyll/IncludeArrayTag.html","",""],["Jekyll::IncludeCodeTag","","Jekyll/IncludeCodeTag.html","",""],["Jekyll::JsFiddle","","Jekyll/JsFiddle.html","",""],["Jekyll::Layout","","Jekyll/Layout.html","",""],["Jekyll::MarkdownConverter","","Jekyll/MarkdownConverter.html","",""],["Jekyll::Page","","Jekyll/Page.html","","<p>Monkey patch for the Jekyll Page class. For the original class, see:\ngithub.com/mojombo/jekyll/blob/master/lib/jekyll/page.rb …\n"],["Jekyll::Pager","","Jekyll/Pager.html","",""],["Jekyll::Pagination","","Jekyll/Pagination.html","",""],["Jekyll::Post","","Jekyll/Post.html","","<p>Monkey patch for the Jekyll Post class. For the original class, see:\ngithub.com/mojombo/jekyll/blob/master/lib/jekyll/post.rb …\n"],["Jekyll::PostFilter","","Jekyll/PostFilter.html","","<p>Extended plugin type that allows the plugin to be called on varous callback\nmethods.\n<p>Examples:\ngithub.com/tedkulp/octopress/blob/master/plugins/post_metaweblog.rb …\n"],["Jekyll::PullquoteTag","","Jekyll/PullquoteTag.html","",""],["Jekyll::RawTag","","Jekyll/RawTag.html","",""],["Jekyll::RenderPartialTag","","Jekyll/RenderPartialTag.html","",""],["Jekyll::Site","","Jekyll/Site.html","","<p>Monkey patch for the Jekyll Site class. For the original class, see:\ngithub.com/mojombo/jekyll/blob/master/lib/jekyll/site.rb …\n"],["Jekyll::SitemapFile","","Jekyll/SitemapFile.html","","<p>Recover from strange exception when starting server without –auto\n"],["Jekyll::SitemapGenerator","","Jekyll/SitemapGenerator.html","",""],["Jekyll::TagCloud","","Jekyll/TagCloud.html","",""],["Jekyll::VideoTag","","Jekyll/VideoTag.html","",""],["Object","","Object.html","",""],["Octopress","","Octopress.html","",""],["Octopress::Date","","Octopress/Date.html","",""],["OctopressFilters","","OctopressFilters.html","",""],["OctopressLiquidFilters","","OctopressLiquidFilters.html","",""],["RubyPants","","RubyPants.html","","<p>RubyPants – SmartyPants ported to Ruby\n<p>Synopsis\n<p>RubyPants is a Ruby port of the smart-quotes library  …\n"],["String","","String.html","",""],["TemplateWrapper","","TemplateWrapper.html","","<p>Author: Brandon Mathis Description: Provides plugins with a method for\nwrapping and unwrapping input …\n"],["cache","Jekyll::GistTag","Jekyll/GistTag.html#method-i-cache","(gist, file, data)",""],["calculate_pages","Jekyll::Pager","Jekyll/Pager.html#method-c-calculate_pages","(all_posts, per_page)","<p>Calculate the number of pages.\n<p>all_posts - The Array of all Posts. per_page  - The Integer of entries …\n"],["category_links","Jekyll::Filters","Jekyll/Filters.html#method-i-category_links","(categories)","<p>Outputs a list of categories as comma-separated &lt;a&gt; links. This is\nused to output the category …\n"],["cdata_escape","OctopressLiquidFilters","OctopressLiquidFilters.html#method-i-cdata_escape","(input)","<p>Escapes CDATA sections in post content\n"],["condense_spaces","OctopressLiquidFilters","OctopressLiquidFilters.html#method-i-condense_spaces","(input)","<p>Condenses multiple spaces and tabs into a single space\n"],["convert","Jekyll::HamlConverter","Jekyll/HamlConverter.html#method-i-convert","(content)",""],["convert","Jekyll::MarkdownConverter","Jekyll/MarkdownConverter.html#method-i-convert","(content)",""],["date_to_html_string","Jekyll::Filters","Jekyll/Filters.html#method-i-date_to_html_string","(date)","<p>Outputs the post.date as formatted html, with hooks for CSS styling.\n\n<pre>+date+ is the date object to format ...</pre>\n"],["datetime","Octopress::Date","Octopress/Date.html#method-i-datetime","(date)","<p>Returns a datetime if the input is a string\n"],["do_layout","Jekyll::Convertible","Jekyll/Convertible.html#method-i-do_layout","(payload, layouts)","<p>Calls the pre_render method if it exists and then adds any necessary\nlayouts to this convertible document. …\n"],["educate_backticks","RubyPants","RubyPants.html#method-i-educate_backticks","(str)","<p>Return the string, with “<code>``backticks''</code>”-style single quotes\ntranslated into HTML curly quote …\n"],["educate_dashes","RubyPants","RubyPants.html#method-i-educate_dashes","(str)","<p>The string, with each instance of “<code>--</code>” translated to an\nem-dash HTML entity.\n"],["educate_dashes_inverted","RubyPants","RubyPants.html#method-i-educate_dashes_inverted","(str)","<p>Return the string, with each instance of “<code>--</code>” translated to an\nem-dash HTML entity, and each …\n"],["educate_dashes_oldschool","RubyPants","RubyPants.html#method-i-educate_dashes_oldschool","(str)","<p>The string, with each instance of “<code>--</code>” translated to an\nen-dash HTML entity, and each “ …\n"],["educate_ellipses","RubyPants","RubyPants.html#method-i-educate_ellipses","(str)","<p>Return the string, with each instance of “<code>...</code>” translated to\nan ellipsis HTML entity. Also …\n"],["educate_quotes","RubyPants","RubyPants.html#method-i-educate_quotes","(str)","<p>Return the string, with “educated” curly quote HTML entities.\n"],["educate_single_backticks","RubyPants","RubyPants.html#method-i-educate_single_backticks","(str)","<p>Return the string, with “<code>`backticks'</code>”-style single quotes\ntranslated into HTML curly quote …\n"],["excerpt","OctopressLiquidFilters","OctopressLiquidFilters.html#method-i-excerpt","(input)","<p>Used on the blog index to split posts on the &lt;!–more–&gt; marker\n"],["excluded?","Jekyll::SitemapGenerator","Jekyll/SitemapGenerator.html#method-i-excluded-3F","(name)","<p>Is the page or post listed as something we want to exclude?\n<p>Returns boolean\n"],["expand_urls","OctopressLiquidFilters","OctopressLiquidFilters.html#method-i-expand_urls","(input, url='')","<p>Replaces relative urls with full urls\n"],["fill_last_modified","Jekyll::SitemapGenerator","Jekyll/SitemapGenerator.html#method-i-fill_last_modified","(site, page_or_post)","<p>Fill lastmod XML element with the last modified date for the page or post.\n<p>Returns lastmod REXML::Element …\n"],["fill_location","Jekyll::SitemapGenerator","Jekyll/SitemapGenerator.html#method-i-fill_location","(page_or_post)","<p>Get URL location of page or post\n<p>Returns the location of the page or post\n"],["fill_pages","Jekyll::SitemapGenerator","Jekyll/SitemapGenerator.html#method-i-fill_pages","(site, urlset)","<p>Create url elements for all the normal pages and find the date of the index\nto use with the pagination …\n"],["fill_posts","Jekyll::SitemapGenerator","Jekyll/SitemapGenerator.html#method-i-fill_posts","(site, urlset)","<p>Create url elements for all the posts and find the date of the latest one\n<p>Returns last_modified_date of …\n"],["fill_url","Jekyll::SitemapGenerator","Jekyll/SitemapGenerator.html#method-i-fill_url","(site, page_or_post)","<p>Fill data of each URL element: location, last modified, change frequency\n(optional), and priority.\n<p>Returns …\n"],["find_latest_date","Jekyll::SitemapGenerator","Jekyll/SitemapGenerator.html#method-i-find_latest_date","(latest_date, site, page_or_post)","<p>Go through the page/post and any implemented layouts and get the latest\nmodified date\n<p>Returns formatted …\n"],["format_date","Octopress::Date","Octopress/Date.html#method-i-format_date","(date, format)","<p>Formats date either as ordinal or by given date format Adds %o as ordinal\nrepresentation of the day\n"],["full_path_to_source","Jekyll::Layout","Jekyll/Layout.html#method-i-full_path_to_source","()",""],["full_path_to_source","Jekyll::Page","Jekyll/Page.html#method-i-full_path_to_source","()",""],["full_path_to_source","Jekyll::Post","Jekyll/Post.html#method-i-full_path_to_source","()",""],["full_url","Jekyll::Convertible","Jekyll/Convertible.html#method-i-full_url","()","<p>Returns the full url of the post, including the configured url\n"],["generate","Jekyll::GenerateCategories","Jekyll/GenerateCategories.html#method-i-generate","(site)",""],["generate","Jekyll::Pagination","Jekyll/Pagination.html#method-i-generate","(site)","<p>Generate paginated pages if necessary.\n<p>site - The Site.\n<p>Returns nothing.\n"],["generate","Jekyll::SitemapGenerator","Jekyll/SitemapGenerator.html#method-i-generate","(site)","<p>Goes through pages and posts and generates sitemap.xml file\n<p>Returns nothing\n"],["get_cache_file_for","Jekyll::GistTag","Jekyll/GistTag.html#method-i-get_cache_file_for","(gist, file)",""],["get_cached_gist","Jekyll::GistTag","Jekyll/GistTag.html#method-i-get_cached_gist","(gist, file)",""],["get_gist_from_web","Jekyll::GistTag","Jekyll/GistTag.html#method-i-get_gist_from_web","(gist, file)",""],["get_gist_url_for","Jekyll::GistTag","Jekyll/GistTag.html#method-i-get_gist_url_for","(gist, file)",""],["greater_date","Jekyll::SitemapGenerator","Jekyll/SitemapGenerator.html#method-i-greater_date","(date1, date2)","<p>Which of the two dates is later\n<p>Returns latest of two dates\n"],["has_excerpt","OctopressLiquidFilters","OctopressLiquidFilters.html#method-i-has_excerpt","(input)","<p>Checks for excerpts (helpful for template conditionals)\n"],["highlight","HighlightCode","HighlightCode.html#method-i-highlight","(str, lang)",""],["html_output_for","Jekyll::GistTag","Jekyll/GistTag.html#method-i-html_output_for","(script_url, code)",""],["is_filterable?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-is_filterable-3F","()",""],["is_page?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-is_page-3F","()",""],["is_post?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-is_post-3F","()",""],["load_post_filters","Jekyll::Site","Jekyll/Site.html#method-i-load_post_filters","()","<p>Instantiates all of the post_filter plugins. This is basically a\nduplication of the other loaders in …\n"],["location_on_server","Jekyll::Page","Jekyll/Page.html#method-i-location_on_server","()",""],["location_on_server","Jekyll::Post","Jekyll/Post.html#method-i-location_on_server","()",""],["matches","Jekyll::HamlConverter","Jekyll/HamlConverter.html#method-i-matches","(ext)",""],["new","Jekyll::Blockquote","Jekyll/Blockquote.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::CategoryFeed","Jekyll/CategoryFeed.html#method-c-new","(site, base, category_dir, category)","<p>Initializes a new CategoryFeed.\n\n<pre>+base+         is the String path to the &lt;source&gt;.\n+category_dir+ is the ...</pre>\n"],["new","Jekyll::CategoryIndex","Jekyll/CategoryIndex.html#method-c-new","(site, base, category_dir, category)","<p>Initializes a new CategoryIndex.\n\n<pre>+base+         is the String path to the &lt;source&gt;.\n+category_dir+ is ...</pre>\n"],["new","Jekyll::CategoryList","Jekyll/CategoryList.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::CodeBlock","Jekyll/CodeBlock.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::GistTag","Jekyll/GistTag.html#method-c-new","(tag_name, text, token)",""],["new","Jekyll::GistTagNoCache","Jekyll/GistTagNoCache.html#method-c-new","(tag_name, text, token)",""],["new","Jekyll::ImageTag","Jekyll/ImageTag.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::IncludeArrayTag","Jekyll/IncludeArrayTag.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::IncludeCodeTag","Jekyll/IncludeCodeTag.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::JsFiddle","Jekyll/JsFiddle.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::Page","Jekyll/Page.html#method-c-new","(site, base, dir, name)","<p>Initialize a new Page.\n<p>site - The Site object. base - The String path to the source. dir  - The\nString …\n"],["new","Jekyll::Pager","Jekyll/Pager.html#method-c-new","(config, page, all_posts, index_dir, pagination_dir, num_pages = nil)","<p>Initialize a new Pager.\n<p>config    - The Hash configuration of the site. page      - The Integer\npage number. …\n"],["new","Jekyll::PullquoteTag","Jekyll/PullquoteTag.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::RenderPartialTag","Jekyll/RenderPartialTag.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::TagCloud","Jekyll/TagCloud.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::VideoTag","Jekyll/VideoTag.html#method-c-new","(tag_name, markup, tokens)",""],["new","RubyPants","RubyPants.html#method-c-new","(string, options=[2])","<p>Create a new RubyPants instance with the text in <code>string</code>.\n<p>Allowed elements in the options array:\n<p>0   &mdash; do …\n"],["old_do_layout","Jekyll::Convertible","Jekyll/Convertible.html#method-i-old_do_layout","(payload, layouts)","<p>Copy the #do_layout method to #old_do_layout, so we can redefine #do_layout\nmethod.\n"],["old_transform","Jekyll::Convertible","Jekyll/Convertible.html#method-i-old_transform","()","<p>Copy the #transform method to #old_transform, so we can redefine #transform\nmethod.\n"],["old_write","Jekyll::Page","Jekyll/Page.html#method-i-old_write","(dest)","<p>Copy the #write method to #old_write, so we can redefine #write method.\n"],["old_write","Jekyll::Post","Jekyll/Post.html#method-i-old_write","(dest)","<p>Copy the #write method to #old_write, so we can redefine #write method.\n"],["ordinal","Octopress::Date","Octopress/Date.html#method-i-ordinal","(number)","<p>Returns an ordinal number. 13 -&gt; 13th, 21 -&gt; 21st etc.\n"],["ordinalize","Octopress::Date","Octopress/Date.html#method-i-ordinalize","(date)","<p>Returns an ordidinal date eg July 22 2007 -&gt; July 22nd 2007\n"],["output_ext","Jekyll::HamlConverter","Jekyll/HamlConverter.html#method-i-output_ext","(ext)",""],["paginate","Jekyll::Pagination","Jekyll/Pagination.html#method-i-paginate","(site, page)","<p>Paginates the blog’s posts. Renders the index.html file into paginated\ndirectories, e.g.: page2/index.html …\n"],["pagination_enabled?","Jekyll::Pager","Jekyll/Pager.html#method-c-pagination_enabled-3F","(config, file)","<p>Determine if pagination is enabled for a given file.\n<p>config - The configuration Hash. file   - The String …\n"],["paragraphize","Jekyll::Blockquote","Jekyll/Blockquote.html#method-i-paragraphize","(input)",""],["parse","Jekyll::RawTag","Jekyll/RawTag.html#method-i-parse","(tokens)",""],["post_filter","OctopressFilters","OctopressFilters.html#method-i-post_filter","(input)",""],["post_render","Jekyll::ContentFilters","Jekyll/ContentFilters.html#method-i-post_render","(post)",""],["post_render","Jekyll::Convertible","Jekyll/Convertible.html#method-i-post_render","()","<p>Call the #post_render methods on all of the loaded post_filter plugins.\n<p>Returns nothing\n"],["post_render","Jekyll::PostFilter","Jekyll/PostFilter.html#method-i-post_render","(post)","<p>Called after the post is rendered with the converter. Use the post object\nto modify it’s contents before …\n"],["post_write","Jekyll::Convertible","Jekyll/Convertible.html#method-i-post_write","()","<p>Call the #post_write methods on all of the loaded post_filter plugins.\n<p>Returns nothing\n"],["post_write","Jekyll::PostFilter","Jekyll/PostFilter.html#method-i-post_write","(post)","<p>Called after the post is written to the disk. Use the post object to read\nit’s contents to do something …\n"],["posts_included?","Jekyll::SitemapGenerator","Jekyll/SitemapGenerator.html#method-i-posts_included-3F","(name)",""],["pre_filter","OctopressFilters","OctopressFilters.html#method-i-pre_filter","(input)",""],["pre_render","Jekyll::ContentFilters","Jekyll/ContentFilters.html#method-i-pre_render","(post)",""],["pre_render","Jekyll::Convertible","Jekyll/Convertible.html#method-i-pre_render","()","<p>Call the #pre_render methods on all of the loaded post_filter plugins.\n<p>Returns nothing\n"],["pre_render","Jekyll::PostFilter","Jekyll/PostFilter.html#method-i-pre_render","(post)","<p>Called before post is sent to the converter. Allows you to modify the post\nobject before the converter …\n"],["process_escapes","RubyPants","RubyPants.html#method-i-process_escapes","(str)","<p>Return the string, with after processing the following backslash escape\nsequences. This is useful if …\n"],["pygments","HighlightCode","HighlightCode.html#method-i-pygments","(code, lang)",""],["raw_content","OctopressLiquidFilters","OctopressLiquidFilters.html#method-i-raw_content","(input)","<p>Extracts raw content DIV from template, used for page description as {{\ncontent }} contains complete …\n"],["read_posts","Jekyll::Site","Jekyll/Site.html#method-i-read_posts","(dir)","<p>Read all the files in &lt;source&gt;/&lt;dir&gt;/_posts and create a new\nPost object with each one.\n<p>dir …\n"],["render","Jekyll::Blockquote","Jekyll/Blockquote.html#method-i-render","(context)",""],["render","Jekyll::CategoryList","Jekyll/CategoryList.html#method-i-render","(context)",""],["render","Jekyll::CodeBlock","Jekyll/CodeBlock.html#method-i-render","(context)",""],["render","Jekyll::GistTag","Jekyll/GistTag.html#method-i-render","(context)",""],["render","Jekyll::ImageTag","Jekyll/ImageTag.html#method-i-render","(context)",""],["render","Jekyll::IncludeArrayTag","Jekyll/IncludeArrayTag.html#method-i-render","(context)",""],["render","Jekyll::IncludeCodeTag","Jekyll/IncludeCodeTag.html#method-i-render","(context)",""],["render","Jekyll::JsFiddle","Jekyll/JsFiddle.html#method-i-render","(context)",""],["render","Jekyll::PullquoteTag","Jekyll/PullquoteTag.html#method-i-render","(context)",""],["render","Jekyll::RenderPartialTag","Jekyll/RenderPartialTag.html#method-i-render","(context)",""],["render","Jekyll::TagCloud","Jekyll/TagCloud.html#method-i-render","(context)",""],["render","Jekyll::VideoTag","Jekyll/VideoTag.html#method-i-render","(context)",""],["render_code_block","BacktickCodeBlock","BacktickCodeBlock.html#method-i-render_code_block","(input)",""],["safe_wrap","TemplateWrapper","TemplateWrapper.html#method-i-safe_wrap","(input)","<p>Wrap input with a &lt;div&gt;\n"],["script_url_for","Jekyll::GistTag","Jekyll/GistTag.html#method-i-script_url_for","(gist_id, filename)",""],["shorthand_url","OctopressLiquidFilters","OctopressLiquidFilters.html#method-i-shorthand_url","(input)","<p>Returns a url without the protocol (http://)\n"],["smart_capitalize","String","String.html#method-i-smart_capitalize","()",""],["smart_capitalize!","String","String.html#method-i-smart_capitalize-21","()",""],["strip_slash","OctopressLiquidFilters","OctopressLiquidFilters.html#method-i-strip_slash","(input)","<p>Removes trailing forward slash from a string for easily appending url\nsegments\n"],["stupefy_entities","RubyPants","RubyPants.html#method-i-stupefy_entities","(str)","<p>Return the string, with each RubyPants HTML entity translated to its ASCII\ncounterpart.\n<p>Note: This is …\n"],["summary","OctopressLiquidFilters","OctopressLiquidFilters.html#method-i-summary","(input)","<p>Summary is used on the Archive pages to return the first block of content\nfrom a post.\n"],["tableize_code","HighlightCode","HighlightCode.html#method-i-tableize_code","(str, lang = '')",""],["titlecase","OctopressLiquidFilters","OctopressLiquidFilters.html#method-i-titlecase","(input)","<p>Returns a title cased string based on John Gruber’s title case\ndaringfireball.net/2008/08/title_case_update …\n"],["titlecase","String","String.html#method-i-titlecase","()",""],["titlecase!","String","String.html#method-i-titlecase-21","()",""],["to_html","RubyPants","RubyPants.html#method-i-to_html","()","<p>Apply SmartyPants transformations.\n"],["to_liquid","Jekyll::Pager","Jekyll/Pager.html#method-i-to_liquid","()","<p>Convert this Pager’s data to a Hash suitable for use by Liquid.\n<p>Returns the Hash representation of this …\n"],["to_liquid","Jekyll::Post","Jekyll/Post.html#method-i-to_liquid","()","<p>Convert this post into a Hash for use in Liquid templates.\n<p>Returns &lt;Hash&gt;\n"],["tokenize","RubyPants","RubyPants.html#method-i-tokenize","()","<p>Return an array of the tokens comprising the string. Each token is either a\ntag (possibly with nested, …\n"],["transform","Jekyll::Convertible","Jekyll/Convertible.html#method-i-transform","()","<p>Transform the contents based on the content type. Then calls the\n#post_render method if it exists\n<p>Returns …\n"],["truncate","OctopressLiquidFilters","OctopressLiquidFilters.html#method-i-truncate","(input, length)","<p>Improved version of Liquid’s truncate:\n<p>Doesn’t cut in the middle of a word.\n<p>Uses typographically correct …\n"],["truncatewords","OctopressLiquidFilters","OctopressLiquidFilters.html#method-i-truncatewords","(input, length)","<p>Improved version of Liquid’s truncatewords:\n<p>Uses typographically correct ellipsis (…) insted of ‘…’ …\n\n"],["unwrap","TemplateWrapper","TemplateWrapper.html#method-i-unwrap","(input)","<p>This must be applied after the\n"],["valid_change_frequency?","Jekyll::SitemapGenerator","Jekyll/SitemapGenerator.html#method-i-valid_change_frequency-3F","(change_frequency)","<p>Is the change frequency value provided valid according to the spec\n<p>Returns boolean\n"],["valid_priority?","Jekyll::SitemapGenerator","Jekyll/SitemapGenerator.html#method-i-valid_priority-3F","(priority)","<p>Is the priority value provided valid according to the spec\n<p>Returns boolean\n"],["write","Jekyll::Page","Jekyll/Page.html#method-i-write","(dest)","<p>Write the generated post file to the destination directory. It then calls\nany post_write methods that …\n"],["write","Jekyll::Post","Jekyll/Post.html#method-i-write","(dest)","<p>Write the generated post file to the destination directory. It then calls\nany post_write methods that …\n"],["write","Jekyll::SitemapFile","Jekyll/SitemapFile.html#method-i-write","(dest)",""],["write_category_index","Jekyll::Site","Jekyll/Site.html#method-i-write_category_index","(category_dir, category)","<p>Creates an instance of CategoryIndex for each category page, renders it,\nand writes the output to a file. …\n"],["write_category_indexes","Jekyll::Site","Jekyll/Site.html#method-i-write_category_indexes","()","<p>Loops through the list of category pages and processes each one.\n"],["Gemfile","","Gemfile.html","","<p>source “rubygems.org”\n<p>group :development do\n\n<pre>gem 'rake', '~&gt; 0.9.2'\ngem 'rack', '~&gt; 1.4.1'\ngem ...</pre>\n"],["Rakefile","","Rakefile.html","","<p>require “rubygems” require “bundler/setup” require “stringex”\n<p>## – Rsync …\n"]]}}