<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GCC | A Coding Monkey's Blog]]></title>
  <link href="http://zandyware.com/blog/categories/gcc/atom.xml" rel="self"/>
  <link href="http://zandyware.com/"/>
  <updated>2012-12-26T05:08:12-06:00</updated>
  <id>http://zandyware.com/</id>
  <author>
    <name><![CDATA[Zandy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GCC-4.5.0 users, upgrade to 4.5.2 or newer]]></title>
    <link href="http://zandyware.com/blog/2011/05/14/gcc-4-5-0-users-upgrade-to-4-5-2-or-newer/"/>
    <updated>2011-05-14T01:56:58-05:00</updated>
    <id>http://zandyware.com/blog/2011/05/14/gcc-4-5-0-users-upgrade-to-4-5-2-or-newer</id>
    <content type="html"><![CDATA[<p>I'm debugging a complicated C++ program this week. It used a lot of STL containers, such as
stl::map. To print the content of stl::map in GDB-7.x with Python<a href="http://sourceware.org/gdb/wiki/STLSupport">
pretty-printing</a> enabled. I got error message like
<a href="http://gcc.gnu.org/ml/libstdc++/2010-06/msg00128.html">this</a>. My original thought was it might be
a bug in GDB, so I upgraded it to the latest version. But the error remained. Without
pretty-printing, debugging C++ program is really a PITA. So I had to stop my work at hand and
searched for solution online. After I read this <a href="http://gcc.gnu.org/bugzilla/show_bug.cgi?id=44645">bug report</a>, I realised that it was due to the bug in
GCC. I did a simple test as mentioned in the bug report and found out that program compiled with
GCC-4.5.0 would mess up the pretty-printing in GDB. After installing the lastest GCC-4.5.3,
everything was OK.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[colorgcc and ccache work together]]></title>
    <link href="http://zandyware.com/blog/2011/01/07/colorgcc-and-ccache-work-together/"/>
    <updated>2011-01-07T10:52:29-06:00</updated>
    <id>http://zandyware.com/blog/2011/01/07/colorgcc-and-ccache-work-together</id>
    <content type="html"><![CDATA[<p>The plain and lengthy output of g++ was a hurt to eye when your code contains a lot of template
programming. <a href="http://schlueters.de/colorgcc.html">colorgcc</a> can make life easier. It can work well
with <a href="http://ccache.samba.org/">ccache</a> but needs a bit trick to connect them together. I would like
to recommend the solution at</p>

<p><a href="http://stackoverflow.com/questions/1995415/g-colorgcc-and-ccache">http://stackoverflow.com/questions/1995415/g-colorgcc-and-ccache</a></p>

<p>I copy the main part right here:</p>

<blockquote><h2>The Short Answer</h2>

<p>Without patching <code>colorgcc.pl</code> itself, the easiest way to fix this is to write yourself a simple wrapper script for each command, calling <code>ccache</code> with the appropriate arguments for that command, and passing along the arguments the script received (effectively <a href="http://en.wikipedia.org/wiki/Currying">currying</a> the call to <code>ccache</code>.)</p></blockquote>

<p>E.g., for <strong>gcc</strong>:</p>

<blockquote><ul>
<li><p><strong>/usr/local/bin/ccache-gcc.sh:</strong></p>

<p><code>#!/bin/bash
ccache /usr/bin/gcc "$@"
</code></p></li>
<li><p><strong>~/.colorgcc:</strong></p>

<p><code>gcc: /usr/local/bin/ccache-gcc.sh
</code></p></li>
</ul>
</blockquote>

<p>and for <strong>g++</strong>:</p>

<blockquote><ul>
<li><p><strong>/usr/local/bin/ccache-g++.sh:</strong></p>

<p><code>#!/bin/bash
ccache /usr/bin/g++ "$@"
</code></p></li>
<li><p><strong>~/.colorgcc:</strong></p>

<p><code>gcc: /usr/local/bin/ccache-g++.sh
</code></p></li>
</ul>
</blockquote>

<p>There are ways to clean this up so that you only use a single script,  with symlinks for each variant, but those are beyond the scope of this  answer, and I leave them to you as an excercise :-)</p>
]]></content>
  </entry>
  
</feed>
