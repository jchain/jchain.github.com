<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C/C++ | A Coding Monkey's Blog]]></title>
  <link href="http://jchain.github.com/blog/categories/c-slash-c-plus-plus/atom.xml" rel="self"/>
  <link href="http://jchain.github.com/"/>
  <updated>2013-12-17T23:51:28-06:00</updated>
  <id>http://jchain.github.com/</id>
  <author>
    <name><![CDATA[Zandy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arrow keys  don't work properly in Totalview Debugger]]></title>
    <link href="http://jchain.github.com/blog/2011/11/14/arrow-keys-dont-work-properly-in-totalview-debugger/"/>
    <updated>2011-11-14T16:21:23-06:00</updated>
    <id>http://jchain.github.com/blog/2011/11/14/arrow-keys-dont-work-properly-in-totalview-debugger</id>
    <content type="html"><![CDATA[<p>Totalview is a very powerful debugger for C/C++, Fortran languages, especially for debugging high performance programs. In this commandline interface(a new xterm window) no matter how hard I tried my arrow ‘Up’ key entered [[A char and ‘Down’ keys gave [[B char. What I really wanted was the ‘history-previous’ and ‘history-next’ in common Bash terminals. This type of malfunction really sucks when you debug a program through CLI. I thought at the beginning that it was due to curtain ‘mismatch’ between different ’TERM’s or xterm mis-configuration. Wired, arrow keys worked fine if I myself started xterm. I have tried many so-called key remap configurations for xterm, rxvt or vt100/102. None of them worked.</p>
<p>Finally I realized that Totalview heavily relies on TCL. Its CLI is also built from TCL. So when I ran ‘tclsh’ in my Gnome terminal, pressing arrow keys misbehaved the exactly same way as in Totalview CLI. Therefore I continued the solution search online until I found <a href="http://utopia.knoware.nl/~hlub/rlwrap/">http://utopia.knoware.nl/~hlub/rlwrap/</a>. Simply run ‘rlwrap tclsh’ and ‘rlwrap tv8cli’ and the arrow keys worked like a charm.</p>
<p>I further aliased ‘tv8cli’ as ‘rlwrap tv8cli’. But I still couldn’t make it work in Totalview’s GUI xterm CLI. Is there a way to do that?</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging memory violation in wxgtk3 with valgrind]]></title>
    <link href="http://jchain.github.com/blog/2011/08/21/debugging-memory-violation-in-wxgtk3-with-valgrind/"/>
    <updated>2011-08-21T11:30:39-05:00</updated>
    <id>http://jchain.github.com/blog/2011/08/21/debugging-memory-violation-in-wxgtk3-with-valgrind</id>
    <content type="html"><![CDATA[<p>wxgtk3 is under active development. Today I ran into a <strong>SIGABRT</strong> signal when debugging samples/image. The error message is like this:</p>
<blockquote>
<p><em>*</em> glibc detected <em>*</em> ./image: malloc(): smallbin double linked list corrupted: 0x0000000000c93180 <em>*</em> ======= Backtrace: ========= /lib64/libc.so.6(+0x73226)[0x7f580b58f226] /lib64/libc.so.6(+0x758cf)[0x7f580b5918cf] /lib64/libc.so.6(<em><em>libc</em>malloc+0x79)[0x7f580b593aa9] /usr/lib64/libstdc++.so.6(</em>Znwm+0x1d)[0x7f580bd6d3dd] /usr/lib64/libstdc++.so.6(_Znam+0x9)[0x7f580bd6d4f9] ./image[0x4a6d2c] ./image[0x4a8d7c] ./image[0x4ab21f] ./image[0x4aaeb6]</p>
</blockquote>
<p>What is “<em>malloc(): smallbin double linked list corrupted</em>” error? I had no clue. I loaded the program in gdb and saw this error happens when a specific line of code having ‘new’ operator was hit. It should be some memory allocation violation. I searched it in Google. The returned results showed many bug reports containing this error. Interestingly, a good number of the follow-up replies said the bug was not reproducible and suggested the original  bug reporter submit valgrind log but few did that so these bug reports were marked as invalid.</p>
<p>I guessed most bug reporters were just common users who were not familiar with valgrind. Anyway, the search results suggested me run valgrind to get more information about the memory violation. Luckly, I played with it several month ago and made a not-bad <a href="http://zandyware.wordpress.com/2011/01/21/share-my-newly-created-valgrind-wxgtk-2-9-1-suppression-file/">suppression file</a> customized with wxgtk. Again I ran valgrind with the command like this:</p>
<p>G_SLICE=always-malloc G_DEBUG=gc-friendly valgrind –leak-check=yes –suppressions=./wx.supp –log-file=valgrind.log ./image</p>
<p>Valgrind immediately tracked down where the real problem was. The log looked like this</p>
<blockquote>
<p>==17645== Memcheck, a memory error detector ==17645== Copyright (C) 2002-2010, and GNU GPL’d, by Julian Seward et al. ==17645== Using Valgrind-3.6.1 and LibVEX; rerun with -h for copyright info ==17645== Command: ./image ==17645== Parent PID: 28951 ==17645== ==17645== Source and destination overlap in memcpy(0xe004860, 0xe003430, 5600) ==17645==    at 0x4C289A6: memcpy (mc_replace_strmem.c:635) ==17645==    by 0x447DD0: wxBitmap::CreateFromImageAsPixmap(wxImage const&amp;, int) (bitmap_gtk3.cpp:500) ==17645==    by 0x447910: wxBitmap::CreateFromImage(wxImage const&amp;, int) (bitmap_gtk3.cpp:383) ==17645==    by 0x425694: wxBitmap::wxBitmap(wxImage const&amp;, int) (bitmap.h:72) ==17645==    by 0x42DDEA: MyCanvas::MyCanvas(wxWindow<em>, int, wxPoint const&amp;, wxSize const&amp;) (canvas.cpp:199) ==17645==    by 0x41EE7F: MyFrame::MyFrame() (image.cpp:678) ==17645==    by 0x420B23: MyApp::OnInit() (image.cpp:878) ==17645==    by 0x424A22: wxAppConsoleBase::CallOnInit() (app.h:92) ==17645==    by 0x611002: wxEntry(int&amp;, wchar_t<strong>) (init.cpp:456) ==17645==    by 0x6110F1: wxEntry(int&amp;, char</strong>) (init.cpp:484) ==17645==    by 0x420A84: main (image.cpp:869) ==17645== ==17645== Invalid read of size 8 ==17645==    at 0x4C28B2C: memcpy (mc_replace_strmem.c:635) ==17645==    by 0x447DD0: wxBitmap::CreateFromImageAsPixmap(wxImage const&amp;, int) (bitmap_gtk3.cpp:500) ==17645==    by 0x447910: wxBitmap::CreateFromImage(wxImage const&amp;, int) (bitmap_gtk3.cpp:383) ==17645==    by 0x425694: wxBitmap::wxBitmap(wxImage const&amp;, int) (bitmap.h:72) ==17645==    by 0x42DDEA: MyCanvas::MyCanvas(wxWindow</em>, int, wxPoint const&amp;, wxSize const&amp;) (canvas.cpp:199) ==17645==    by 0x41EE7F: MyFrame::MyFrame() (image.cpp:678) ==17645==    by 0x420B23: MyApp::OnInit() (image.cpp:878) ==17645==    by 0x424A22: wxAppConsoleBase::CallOnInit() (app.h:92) ==17645==    by 0x611002: wxEntry(int&amp;, wchar_t<strong>) (init.cpp:456) ==17645==    by 0x6110F1: wxEntry(int&amp;, char</strong>) (init.cpp:484) ==17645==    by 0x420A84: main (image.cpp:869)</p>
</blockquote>
<p>It turned out that memcpy() at the line 500 in bitmap_gtk3.cpp manipulated overlapping memory. That was the actual culprit. Valgrind even showed the call backtrace to help you to reproduce the bug. Awesome.</p>
<p>I hope this blog entry help you to use Valgrind to locate the bug and fix memory error quickly.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understand gcc -L option and library search order]]></title>
    <link href="http://jchain.github.com/blog/2011/07/26/understand-gcc-l-option-and-library-search-order/"/>
    <updated>2011-07-26T11:27:12-05:00</updated>
    <id>http://jchain.github.com/blog/2011/07/26/understand-gcc-l-option-and-library-search-order</id>
    <content type="html"><![CDATA[<p>In my project of porting wxGTK from GTK+2 to GTK+3, I built GTK+3 from scratch and installed it at a non-standard location. One of the painful things was that the gcc linker complained about the unknown references to glib or functions. The reason was that I had two parallel glib-2.0.so, one was the system default at /usr/lib64, the other was from my custom build. In the makefile, the gcc linker was given three -L options, something like</p>
<blockquote>
<p>-L/usr/lib64 blah blah blah -L/home/foo/gtk3/libs blah blah blah -L/usr/lib64</p>
</blockquote>
Apparently, one of two options -L/usr/lib64 took higher priority in the library search order so that my custom glib-2.0.so was not found. But which one was the culprit? I did a little experiment and it turned out that the first masked my custom GTK+3 lib path. So the conclusion is if you have several -L
<dir> 
<p>options the library search order will be ‘first-come-first-search’.</p>
<p>The next question is how to solve it. In the makefile, linker flags were specified by something like this:</p>
<blockquote>
<p><span class="math">(<em>C</em><em>X</em><em>X</em>)<em>b</em><em>l</em><em>a</em><em>h</em><em>b</em><em>l</em><em>a</em><em>h</em><em>b</em><em>l</em><em>a</em><em>h</em></span>(LDFLAGS) <span class="math">(<em>E</em><em>X</em><em>T</em><em>R</em><em>A</em><em>L</em><em>I</em><em>B</em><em>S</em><sub><em>F</em></sub><em>O</em><em>R</em><sub><em>G</em></sub><em>U</em><em>I</em>)</span>(LIBS)</p>
</blockquote>
<p>In my case, the default setting for <span class="math">(<em>L</em><em>D</em><em>F</em><em>L</em><em>A</em><em>G</em><em>S</em>)<em>i</em><em>s</em>ʹ − <em>L</em> / <em>u</em><em>s</em><em>r</em> / <em>l</em><em>i</em><em>b</em>64ʹ, </span>(EXTRALIBS_FOR_GUI)=‘-L/home/foo/gtk3/libs’ and $(LIBS)=‘-L/usr/lib64’. Since the makefile was generated by configure which is effected by the environmental variables such as LDFLAGS, doing the following solved my problem:</p>
<blockquote>
<p>export LDFLAGS=‘-L/home/foo/gtk3/libs’</p>
</blockquote>
<p>re-run configure</p>
<p>Your mileage may vary. But hope this post can give some hints for your own problems especially if you use parallel libraries.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nasty bug lurked in the implicite function]]></title>
    <link href="http://jchain.github.com/blog/2011/06/28/nasty-bug-lurked-in-the-implicite-function/"/>
    <updated>2011-06-28T13:16:51-05:00</updated>
    <id>http://jchain.github.com/blog/2011/06/28/nasty-bug-lurked-in-the-implicite-function</id>
    <content type="html"><![CDATA[<p>I fixed a bug in C code today and it was so nasty that I think it is worth a blog post so that I can keep that in mind.</p>
<p>I called a function which allocated a chunk of memory with malloc() and returned a pointer pointing to that memory. The wired thing is the returned address will change so that the caller get an invalid address(out of the bound of memory). More precisely speaking, the most significant bit changes from 0x7fff…. to 0xffff…. I really had no clue about why it would go like that. I even tried to disassemble the C code to check what was wrong. It turned out that the return address in the callee was correct but after returning the address to the caller, the value changed. I wrote another toy program to verify everything and finally I nailed down the reason. The callee function is defined in another C file and it looks like an implicit function to the caller. Somehow, this implicit function changed the address during the call. The compilation was fine even though GCC threw a warning about it. I ignored it at the first place but eventually this warning bit me. After adding necessary definitions in the header files. My program worked like a charm.</p>
<p>The lesson I learned: don’t ignore the warning messages of compiler.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wxGTK with gtk+3.0 preview]]></title>
    <link href="http://jchain.github.com/blog/2011/06/25/wxgtk-with-gtk3-0-preview/"/>
    <updated>2011-06-25T20:26:00-05:00</updated>
    <id>http://jchain.github.com/blog/2011/06/25/wxgtk-with-gtk3-0-preview</id>
    <content type="html"><![CDATA[<p>After about one month porting work on wxWidgets with GTK+3.0, we finally made the wx-gtk+3.0 build possible. The wx/samples/minimal is working as shown below even though the status bar doesn’t show up. For preview purpose of course. <a href="http://zandyware.files.wordpress.com/2011/06/wxgtk3_minimal.png"><img src="http://zandyware.files.wordpress.com/2011/06/wxgtk3_minimal.png" /></a> Work will continue on porting drawing code with Cairo as what gtk+3.0 does by default. More samples will be built and tested. Stay tune.</p>]]></content>
  </entry>
  
</feed>
