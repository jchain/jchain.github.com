<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | A Coding Monkey's Blog]]></title>
  <link href="http://jchain.github.com/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://jchain.github.com/"/>
  <updated>2013-01-17T16:45:42-06:00</updated>
  <id>http://jchain.github.com/</id>
  <author>
    <name><![CDATA[Zandy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Perl one liner: replace text in mulple files]]></title>
    <link href="http://jchain.github.com/blog/2012/11/17/perl-one-liner-replace-text-in-mulple-files/"/>
    <updated>2012-11-17T02:10:00-06:00</updated>
    <id>http://jchain.github.com/blog/2012/11/17/perl-one-liner-replace-text-in-mulple-files</id>
    <content type="html"><![CDATA[<p>Today I got some time to improve my tech blog with <a href="http://octopress.org">Octopress</a>. I found that I couldn't use the
different letter cases as the same category name. Otherwise the category page wouldn't show correct
number of links to the posts under that category. For example, I had to change all <code>git</code> to <code>Git</code> in
the meta info of every posts. Here was what I used to get this job done.</p>

<pre><code>ack "\- git" *.markdown -l | xargs perl -p -i -e 's/- git/- Git/g'
</code></pre>

<p>A little explanation:</p>

<pre><code>-l: ask ack to only show the filename with matched search pattern. You can try first without -l
    option to make sure you find the correct files. And then run with -l option to make the output
    suitable for xargs
-p: read and loop from files instead of STDIN
-i: in-place edit
-e: run the command. Here we do the search and replace operations.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl script: retrieve current weather condition and forecast]]></title>
    <link href="http://jchain.github.com/blog/2012/09/25/perl-script-retrieve-current-weather-condition-and-forecast/"/>
    <updated>2012-09-25T21:33:42-05:00</updated>
    <id>http://jchain.github.com/blog/2012/09/25/perl-script-retrieve-current-weather-condition-and-forecast</id>
    <content type="html"><![CDATA[<p>I'm a little tired of checking out the weather condition via the web browser. In many cases I just
want to see a short report in my terminal. After
readingÂ <a href="http://blogs.perl.org/users/zengargoyle/2012/08/not-to-hot-for-mojo.html">http://blogs.perl.org/users/zengargoyle/2012/08/not-to-hot-for-mojo.html</a>,
which shows how to use Mojolicious to retrieve the current condition and
<a href="http://www.commandlinefu.com/commands/view/4821/get-the-weather-forecast-for-the-next-24-to-48-for-your-location.">http://www.commandlinefu.com/commands/view/4821/get-the-weather-forecast-for-the-next-24-to-48-for-your-location</a>,
which shows how to retried the forecast, I finally wrote something like this</p>

<p>```perl</p>

<h1>!/usr/bin/env perl</h1>

<h1>===============================================================================</h1>

<p>#</p>

<h1>FILE: weather.pl</h1>

<p>#</p>

<h1>USAGE: ./weather.pl</h1>

<p>#</p>

<h1>VERSION: 1.0</h1>

<h1>CREATED: 09/13/2012 10:31:39 PM</h1>

<h1>REVISION: ---</h1>

<h1>===============================================================================</h1>

<p>use strict;
use warnings;
use feature 'say';</p>

<p>use Mojolicious;</p>

<p>my $ua = Mojo::UserAgent->new;
my $dom = $ua->get('http://w1.weather.gov/xml/current_obs/KCID.xml')->res->dom;
my $temp = $dom->find('temperature_string')->[0]->text;
my $weather = $dom->find('weather')->[0]->text;
say "KCID ", $temp, " ", $weather, "\n";</p>

<p>$dom =
$ua->get('http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=Cedar%20Rapids')->res->dom;</p>

<p>for my $e ($dom->find('simpleforecast forecastday')->each) {
 my $day = $e->date->day->text;
 my $month = substr $e->date->monthname->text, 0, 3;
 my $weekday = substr $e->date->weekday->text, 0, 3;
 my $condition = $e->conditions->text;
 my $high = $e->high->fahrenheit->text;
 my $low = $e->low->fahrenheit->text;</p>

<p>printf "%s %s %s, Low: %d, High: %d, %s\n", $weekday, $month, $day, $low, $high, $condition;
}
```</p>

<p>This is how it runs from the terminal:</p>

<p>```bash
[zandyware@zandyware] bin $ ./weather.pl
KCID 63.0 F (17.2 C) Fair</p>

<p>Tue Sep 25, Low: 46, High: 81, Clear
Wed Sep 26, Low: 39, High: 70, Clear
Thu Sep 27, Low: 45, High: 70, Clear
Fri Sep 28, Low: 46, High: 70, Partly Cloudy
Sat Sep 29, Low: 45, High: 72, Clear
Sun Sep 30, Low: 41, High: 73, Clear
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Perl like sed]]></title>
    <link href="http://jchain.github.com/blog/2012/09/14/use-perl-like-sed/"/>
    <updated>2012-09-14T11:29:58-05:00</updated>
    <id>http://jchain.github.com/blog/2012/09/14/use-perl-like-sed</id>
    <content type="html"><![CDATA[<p>Recently I wanted to use Perl and Bash to deal with a large number of files. I ended up needing
in-line string substitution to create new shell commands. I vaguely had an idea that I should use
'sed' to do the text transform but by any chance I would like to use Perl. I rarely use Perl as
one-liner. It turned out that this is the correct way to do so</p>

<pre><code>find . -name "*.java" -print | perl -ne 's/java/java.old/g &amp;&amp; print'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perlbrew and openSUSE]]></title>
    <link href="http://jchain.github.com/blog/2012/02/05/perlbrew-and-opensuse/"/>
    <updated>2012-02-05T00:08:45-06:00</updated>
    <id>http://jchain.github.com/blog/2012/02/05/perlbrew-and-opensuse</id>
    <content type="html"><![CDATA[<p>I have heard about how great <a href="http://perlbrew.pl/">perlbrew</a> is from time to time on the web but
I have never had a chance to play with it until today. After my openSUSE was upgraded from 11.x to
12.x and system-wide Perl was upgraded from 5.12 to 5.14, my local Perl modules was broken. I think
it is a good idea to have access to multiple Perl distributions and a good management among them.
Soon I realized that it was time to give perlbrew a try. I tried to install a locally built
Perl-5.14.2 by the command</p>

<pre><code>perlbrew install perl-5.14.2
</code></pre>

<p>But quickly it failed with the exactly the same error like
<a href="http://www.gossamer-threads.com/lists/perl/porters/234587">this</a>. It was about something wrong with
ODBM_File. And this problem seems specific to openSUSE. As the post link said, the solution is</p>

<pre><code>perlbrew install perl-5.14.2 -D noextension=ODBM_File
</code></pre>

<p>This made a good build of perl-5.14.2. I further installed cpanm with perlbrew and replaced the
system-wide cpanm. I've found it a better way to install CPAN modules since by doing so cpanm will
install modules for difference versions of Perl in separate locations. For example, modules for
Perl-5.12 won't conflict with Perl-5.14. This is just what I want.</p>

<p>Happy perlbrewing...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet another rename]]></title>
    <link href="http://jchain.github.com/blog/2011/12/17/yet-another-rename/"/>
    <updated>2011-12-17T12:41:51-06:00</updated>
    <id>http://jchain.github.com/blog/2011/12/17/yet-another-rename</id>
    <content type="html"><![CDATA[<p>I had many randomly named files and directories under my working project. Today I wanted to organize them in a more consistent naming convention. So I needed a file rename tool. Even though Linux base installation has a command 'rename', I soon found this Perl app <a href="http://search.cpan.org/~pederst/rename-1.8/bin/rename.PL">rename</a> is better thanks to Perl's powerful regex. Plus, its dry-run option is also a very good idea.</p>
]]></content>
  </entry>
  
</feed>
